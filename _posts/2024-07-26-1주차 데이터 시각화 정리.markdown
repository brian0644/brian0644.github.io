---
layout: post
title:  "ML 1주차 정리"
date:   2024-07-26 17:13 +09:00
categories: khuda ML session
---
# **ML 1주차 정리**
## 1. EDA
  EDA: 가공하지 않은 원천의 데이터를 탐색하고 분석하는 것 (by 기술통계, 시각화)  
-> 극단적 해석, 지나친 추론, 자의적 해석은 되도록 지양한다.  
* 데이터의 형태와 척도가 분석에 알맞는지 확인 (sanity checking)  
* 데이터 평균, 분산, 분포, 패턴 확인 -> 특성파악  
* 결측값, 이상치 파악 및 보완  
* 변수간 관계성 확인  
* 분석 목적과 방향성 점검 및 보정  

### * EDA 실습
```python
##https://github.com/c-karl/DA_DS_Book001/blob/main/10.1.2.탐색적%20데이터%20분석(EDA).ipynb 참고
# [1] 필요한 패키지 임포트
import seaborn as sns 
import matplotlib.pylot as plt      # seabron과 matplotlib은 그래프 그리기용 패키지
import pandas as pd                 # Pandas는 데이터 분석과 데이터 조작을 위한 파이썬 라이브러리

# [2] 데이터 불러오기
df = pd.read_csv("데이터 경로")

# [3] 데이터 샘플 확인
df.head()                           # vs code에서는 print("여기 안에")

# [4] 각 칼럼의 속성 및 결측치 확인
df.info()                           # Non-Null count에서 결측치가 몇개인지 확인 가능, 자료형도 확인 가능

# [5] 각 칼럼의 통계치 확인
df.describe()                       # 기본적인 자료 개수, 평균, 중앙값 등의 통계치 산출

# [6] 각 칼럼의 왜도 확인
df.skew()

# [7] 각 칼럼의 첨도 확인
df.kurtosis()

# [8] 특정 변수 분포 시각화
sns.displot(df['lead_time'])        # 변수 1개 시각화

# [9] 호텔 구분에 따른 lead_time 분포 차이 시각화
sns.violinplot(x="hotel",y="lead_time", data=df, inner=None, color=".8")
sns.stripplot(x="hotel",y="lead_time", data=df, size=1)) # 변수 1개로 두개 그래프 생성.
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>

## 2. 공분산과 상관성 분석  

  공분산 : 서로 공유하는 분산값 but 두 변수간의 상관성 정도는 파악 불가  
  상관계수 : 공분산이 설명하지 못하는 상관성의 정도를 나타냄 (by 각자의 표준편차로 나눔)
  

**중요한 것은 상관계수의 값과 직선의 기울기값과 관련없으며 두 변수의 선형관계만 측정할 수 있다**

### * 공분산과 상관성 분석 실습
```python
# [1] 전과 같게 + 필요한 패키지 임포트
import numpy as np                  # NumPy는 파이썬에서 과학 계산을 위한 핵심 라이브러리

# [2] 데이터 불러오기
df = pd.read_csv("데이터 경로")

# [3] 산점도 행렬 시각화
sns.set(font_scale=1.1)             # 폰트 크기 설정
sns.set_style('ticks')              # 축 눈금 설정
sns.pairplot(df,diag_kind='kde')    # 상관계수가 1이면 분포로 표시 >> 동일한 변수의 산점도를 분포로 표시, 왜냐면 어짜피 산점도는 직선으로 나오기 때문
plt.show()                          # 생성한 그래프 출력

# [4] 공분산 확인 (숫자형 자료에만)
df.cov()                            # 공분산은 두 데이터의 관계이기 때문에 행렬로 나타남. 마찬가지로 vscode에서는 print(안에)

# [5] 피어슨 상관계수 확인 (숫자형 자료에만)
df.corr(method='pearson')           # 기본 method는 피어슨, 그래서 피어슨 상관계수는 별도로 안적어줘도 됨

# [6] 히트맵 시각화
sns.heatmap(df.corr(), cmap='viridis') # (데이터, 색상) 설정하는 용도

# [7] clustermap 히트맵 시각화
sns.clustermap(df.corr(),annot = True, cmap= 'RdYlBu_r',vmin = -1, vmax = -1,)

# [8] 중복 제거 히트맵 시각화 (우상단 제거)
np.triu(np.ones_like(df.corr()))     # triu는 매트릭스의 우측 상단을 모두 True인 1로, 하단을 False인 0으로 변환. 좌하단 제거는 tril

mask = np.triu(np.ones_like(df.corr(), dtype=np.bool)) # True/False mask 배열로 변환

fig, ax = plt.subplots(figsize=(15,10))
sns.heatmap(df.corr(), mask=mask, vmin=-1, vmax=1, annot=True, cmap="RdYlBu_r", cbar=True)
ax.set_title('제목명', pad = 15)
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>

## 3. 시간 시각화

  시간 흐름에 따른 데이터의 변화를 표현하는 것
* 연속형 : 선그래프, 데이터 밀도가 높을 때 사용   ex) 초 단위의 공정 센서 데이터, 일년 간의 일별 판매량 데이터
* 막대형 : 막대그래프, 데이터 밀도가 낮을 때 사용  ex) 일년치 전체 데이터

**연속형의 경우 데이터의 양이 너무 많거나 변동이 심하면 패턴을 확인하는 것이 어려울 수 있다 => 추세선을 그려야한다**
-> 가장 일반적인 방법이 <u>이동평균방법 (데이터의 연속적 그룹의 평균을 구해서 추세선을 그리는 원리)</u>  



<img width="296" alt="스크린샷 2024-07-26 오후 11 41 10" src="https://github.com/user-attachments/assets/ddd69be9-b1b8-4242-a929-e31eb2789bfb">


**막대형의 경우 1년 동안의 월 간격 단위 흐름과 같이 시간의 밀도가 낮은경우 활용, 누적 막대그래프는 한 시점에 2개 이상의 세부 항목이 존재할때 사용한다.**


<img width="460" alt="스크린샷 2024-07-26 오후 11 41 15" src="https://github.com/user-attachments/assets/807951ad-c4cf-48e4-b5af-158dc7fbd77b">



### * 시간 시각화 실습
```python
# [1] 필요한 패키지 임포트
import matplotlib.pyplot as plt
import pandas as pd
import datetime

# [2] 데이터 불러오기
df = pd.read_csv("데이터 경로")

# [3] date 칼럼 날짜 형식 변환
df['Date2']= pd.to_datetime(df['Order Date'], infer_datetime_format=True) # Order date 문자형을 날짜형으로 변환해서 Date2 새로운 열로 저장
df = df.sort_values(by='Date2')                                           # df데이터에 Date2라는 새로운 열을 오름차순으로 정렬
df['Year'] = df['Date2'].dt.year # 날짜형으로 변환된 Date2의 데이터에서 연도만 빼내기 위해서, .dt(datetime), .year(객체에서 연도 추출)로 Year 칼럼에 저장

# [4] 선그래프용 데이터셋 생성
df_line = df[df.Year == 2018]    # .Year을 통해 이전에 생성한 연도 칼럼 중 [df.Year == 2018]으로 2018년도 데이터만 선택한 새로운 데이터셋 df_line 정의
df_line = df_line.groupby('Date2')['Sales'].sum().reset_index() # .groupby('Date2')를 통해 Date2 값들 중 같은 값끼리 묶고 
                                                                # ['Sales'].sum()을 통해 Date2가 같은(같은 날) 값들 중 Sales의 합산 계산
                                                                # .reset_index()를 통해 0,1,2.. 기준으로 정렬(SQL의 auto incremental)

# [5] 30일 이동평균 생성
df_line['Month'] = df_line['Sales'].rolling(window=30).mean() # Month라는 새로운 열 생성,합계된 일별 판매량 데이터를 30일 씩 묶어서 이동평균계산 후 저장

# [6] 선그래프 시각화
ax = df_line.plot(x='Date2', y='Sales', linewidth = "0.5") # df_line의 데이터 중 X축은 Date2, Y축은 Sales로 선그래프 -> 일별 총 판매량 선 그래프
df_line.plot(x='Date2', y='Month', color='', linewidth ="", ax=ax) # 30일 이동평균 또한 그래프 생성 -> 추이선, ax=ax로 두그래프 겹치게 생성



# [7] 막대그래프용 데이터셋 생성
df_bar_1 = df.groupby('Year')['Sales'].sum().reset_index() # 연도별 판매량 데이터셋 생성

# [8] 연도별 매출액 막대그래프 시각화
ax = df_bar_1.plot.bar(x='Year', y='Sales', rot=0, figsize = (10,5))

# [9] 연도별, 고객별 매출액 데이터셋 생성
df_bar_2 = df.groupby(['Year','Segment'])['Sales'].sum().reset_index()

# [10] 고객별 칼럼으로 피벗
df_bar_2_pv = df_bar_2.pivot(index = 'Year', columns = 'Segment', values = 'Sales').reset_index() # Year은 2018행 2019행 이렇게 인덱스 역할
                                                                      # Segment 열의 고유한 값들(Customer, Corporate)은 피벗 테이블의 열로 사용
                                                                      # Sales의 값들이 value로 채워짐

# [11] 연도별 고객별 매출액 누적 막대 그래프 시각화
df_bar_2_pv.plot.bar(x = 'Year',stacked = True, figsize=() ) # stacked=True로 고객별 금액 누적 합산 출력, 애초에 값들이 Sales라 별도 y축 지정안함
                                                             # stacked=False로 두면 각 연도별로 세개의 막대 그래프 표현
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>

## 4. 비교 시각화

  그룹별 차이를 나타내기 위함
* 히트맵 : 그룹과 비교 요소가 많을 때 효과적, 각각의 셀은 색상이나 채도를 통해 데이터 값의 높고 낮음을 나타냄. 행은 그룹, 열은 요소
* 방사형 차트 : n각형 차트, 흔히 능력치 스탯 보여주는 도형 모양
* 평행 좌표 그래프 : 그룹별 요소 비교, 효과적으로 표현하려면 변수별 값을 정규화 하면 됨(가장 낮은 값은 0%, 가장 높은 값은 100%로 차이 부각)

  

<img width="373" alt="스크린샷 2024-07-27 오후 3 07 43" src="https://github.com/user-attachments/assets/418e14b9-2a06-4d5b-acb7-38d1ca2a1c75">
<img width="458" alt="스크린샷 2024-07-27 오후 3 07 53" src="https://github.com/user-attachments/assets/36deea58-52fe-4e7a-9047-4e62efc57038">
<img width="402" alt="스크린샷 2024-07-27 오후 3 07 59" src="https://github.com/user-attachments/assets/23db9735-cb76-47b3-8a31-fd27a96c634e">


  
### * 비교 시각화 실습
```python
# [1] 필요한 패키지 임포트
import matplotlib.pyplot as plt
import pandas as pd
import datetime
import seaborn as sns
import numpy as np
from math import pi
from pndas.plotting import parallel_coordinates

# [2] 데이터 불러오기
df = pd.read_csv("데이터 경로")

# [3] 히트맵 시각화 V1을 위한 데이터 전처리
df1 = df[df['Tm'].isin(['ATL','BOS','BRK','CHI','CHO'])] # df 데이터에 있는 Tm(팀) 중 isin([''])으로 해당하는 5개의 팀만 df1에 저장
df1 = df1[['Tm','ORB%','TRB%','AST%','BLK%','USG%']]     # df1는 원래 선택된 5개 팀에 대한 모든 칼럼을 저장했지만 6개 칼럼으로 축소
df1 = df1.groupby('Tm').mean()                           # 팀별로 묶어서 정렬, Tm을 제외한 5개 칼럼의 평균값 계산 후 df1에 저장

# [4] 히트맵 시각화 V1
fig = plt.figure(figsize(8,8))  # 8x8 그림 생성
fig.set_facecolor('white')      # 그림 객체 배경 색칠
plt.pcolor(df1.values)          # df1 데이터프레임의 값을 사용하여 히트맵을 그림

plt.xticks(range(len(df1.columns)),df1.columns) # 위에서 생성한 그림 객체에 df1의 열 개수만큼 x축 틱(tick)을 생성, 그 틱의 위치에 df1의 열 이름을 대입
plt.yticks(range(len(df1.index)),df1.index)     # 위에서 생성한 그림 객체에 df1의 행 개수만큼 y축 틱(tick)을 생성, 그 틱의 위치에 df1의 행 이름을 대입
plt.xlabel('Value', fontsize = )                # x축의 이름 표시 
plt.ylabel('Team', fontsize = )                 # y축의 이름 표시
plt.colorbar()                                  # 우측 색상 설명 바 표시
plt.show()

# [5] 히트맵 시각화 V2를 위한 데이터 전처리
df2 = df[df['Tm'].isin(['ATL','BOS','BRK','CHI','CHO'])] # df 데이터에 있는 Tm(팀) 중 isin([''])으로 해당하는 5개의 팀만 df2에 저장
df2 = df2[['Tm','Age','G']]                              # df2는 원래 선택된 5개 팀에 대한 모든 칼럼을 저장했지만 3개 칼럼으로 축소
df2 = df2.groupby(['Tm','Age']).mean().reset_index()     # 팀별, 나이별로 묶어서 정렬, 남은 칼럼인 게임수 G에 대한 평균 계산 > 팀 속 나이별 평균게임 수
df2 = df2.pivot(index='Tm', columns='Age', values='G')   # 팀을 인덱스로, 칼럼은 나이, 평균 게임수가 데이터

# [6] 히트맵 시각화 V2
fig = plt.figure(figsize=(8,8)) # 8x8 그림 생성
fig.set_facecolor('white')      # 그림 객체 배경 색칠
plt.pcolor(df2.values)          # df2 데이터프레임의 값을 사용하여 히트맵을 그림

plt.xticks(range(len(df2.columns)), df2.columns) # 위에서 생성한 그림 객체에 df2의 열 개수만큼 x축 틱(tick)을 생성, 그 틱의 위치에 df2의 열 이름을 대입
plt.yticks(range(len(df2.index)), df2.index)     # 위에서 생성한 그림 객체에 df2의 행 개수만큼 y축 틱(tick)을 생성, 그 틱의 위치에 df2의 행 이름을 대입
plt.xlabel('Age', fontsize = )                   # x축의 이름 표시
plt.ylabel('Team', fontsize = )                  # y축의 이름 표시
plt.colorbar()                                   # 우측 색상 설명 바 표시
plt.show()

# [7] 방사형 차트 시각화
df3 = df1.reset_index()                          # df1 데이터 인덱스 초기화 후 df3에 저장
labels = df3.columns[1:]                         # df3의 칼럼을 0번 이후 1번부터 받아서 끝까지 Label로 저장
num_labels = len(labels)                         # 1~5까지니까 5 저장
angles = [x/float(num_labels)*(2*pi) for x in range(num_labels)] #x = 등분하고 싶은 점, num_label = n등분 > 즉 n등분한 등분점의 각도 계산
angles += angles[:1]                             # angles 리스트의 마지막에 첫 번째 요소가 추가 > 리스트에는 n+1개의 원소

mypalette = plt.cm.get_cmap("Set2", len(df3.index)) # mypalette는 Set2 컬러맵에서 df3 데이터프레임의 행 수에 맞는 색상 팔레트를 생성

fig = pit.figure(figsize=(15,20))                   # 15x20 그림 생성
fig.set_facecolor('white')                          # 그림 객체 배경 색칠

for i, row in df3.iterrows():
    color = my_palette(i)
    data = df3.iloc[i].drop('Tm').tolist()
    data += data[:1]

ax = plt.subplot(3,2,i+1, polar=True)
    ax.set_theta_offset(pi / 2) # 시작점 설정
    ax.set_theta_direction(-1)  # 시계방향 설정
    plt.xticks(angles[:-1], labels, fontsize=13)    # 각도 축 눈금 생성
    ax.tick_params(axis='x', which='major', pad=15) # 각 축과 눈금 사이 여백생
    ax.set_rlabel_position(0)                       # 반지름 축 눈금 라벨 각도 0으로 설정
    plt.yticks([0,5,10,15,20],['0','5','10','15','20'], fontsize=10)    # 반지름 축 눈금 설정
    plt.ylim(0,20)
    ax.plot(angles, data, color=color, linewidth=2, linestyle='solid')  # 방사형 차트 출력
    ax.fill(angles, data, color=color, alpha=0.4)                       # 도형 안쪽 색상 설정
    plt.title(row.Tm, size=20, color=color,x=-0.2, y=1.2, ha='left')    # 각 차트의 제목 생성
plt.tight_layout(pad=3) # 차트 간 간격 설정 
plt.show()

# [8] 평행 좌표 그래프 생성
fig,axes = plt.subplots()
plt.figure(figsize=(16,8)) # 그래프 크기 조정
parallel_coordinates(df3,'Tm',ax=axes, colormap='winter',linewidth = "0.5")
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>

## 5. 분포 시각화

 데이터가 처음 주어졌을 때, 변수들이 어떤 요소로 어느 정도의 비율로 구성되어 있는지를 확인하는 단계. 통계치만으로도 파악이 가능하지만 분포 시각화를 통해 보다 직관적 파악 가능
* 연속형 : 양적 척도 / 막대그래프. 선그래프, 히스토그램(bin)
* 명목형 : 질적 척도 / 파이차트, 도넛차트, 트리맵, 와플차트

  **구성요소가 복잡한 질적 척도를 표현할 때는 트리맵 차트를 이용하면 보다 효과적으로 표현할 수 있다 -> 위계 구조까지 표현 가능 // 와플차트도 비슷하지만 위계 구조 x**


<img width="475" alt="스크린샷 2024-07-27 오후 4 57 13" src="https://github.com/user-attachments/assets/2e7fdc85-3bd1-4e4e-8571-bf8d5b2f3a04">
<img width="458" alt="스크린샷 2024-07-27 오후 4 57 18" src="https://github.com/user-attachments/assets/dd8bed16-a3f4-4056-8108-a4c64d0c7f20">
<img width="470" alt="스크린샷 2024-07-27 오후 4 57 22" src="https://github.com/user-attachments/assets/ba856a5a-bc75-4273-bea4-d932fbb64e5c">

  
### * 비교 시각화 실습
```python
# [1] 필요한 패키지 설치 및 이포트
!pip install plotly
!pip install pywaffle
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np
import plotly.express as px
from pywaffle import Waffle

# [2] 데이터 불러오기
df = pd.read_csv("데이터 경로")

# [3] 기본 히스토그램 시각화
df1 = df[['height_cm']]
plt.hist(df1,bins = 10, label = 'bins=10')
plt.legend()
plt.show()

# [4] 남성 여성 히스토그램 시각화
df1_1 = df[df['sex'].isin(['man'])]       # df 데이터에 있는 sex 중 isin([''])으로 'man'값을 가진 데이터만 df1_1에 저장
df1_1 = df1_1[['height_cm']]              # 남성의 키만 저장
df1_2 = df[df['sex'].isin(['woman'])]     # df 데이터에 있는 sex 중 isin([''])으로 'woman'값을 가진 데이터만 df1_2에 저장
df1_2 = df1_2[['height_cm']]              # 여성의 키만 저장
plt.hist(df1_1, color = 'green', alpha = 0.2, bins = 10, label = 'MAN', density = True)
plt.hist(df1_2, color = 'red', alpha = 0.2, bins = 10, label = 'WOMAN', density = True)
plt.legend()
plt.show()

# [5] 파이차트, 도넛차트 시각화를 위한 데이터 전처리
df2 = df[['country','height_cm']]
df2 = df2[df.height_cm>=175]               # 키 175 이상만 추출
df2 = df2.groupby('country').count().reset_index()
 
# [6] 파이차트 시각화
fig = plt.figure(figsize=(8,8)) # 캔버스 생성
fig.set_facecolor('white')      # 캔버스 배경색 설정
ax = fig.add_subplot()          # 프레임 생성

ax.pie(df2.height_cm, 
       labels=df2.country,                    # 라벨 출력
       startangle=0,                          # 시작점 degree 설정
       counterclock=False,                    # 시계 방향
       autopct=lambda p : '{:.1f}%'.format(p) # 퍼센자릿수 설정
       )
plt.legend()                                  # 범례 표시
plt.show()

# [7] 도넛차트 시각화
wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 5} # 차트 형태 옵션 설정
plt.pie(df2.height_cm, labels=df2.country, autopct='%.1f%%', 
        startangle=90, counterclock=False, wedgeprops=wedgeprops)
plt.show()

# [8] 트리맵 차트용 데이터셋 전처리
df3 = df[['country', 'sex', 'height_cm']]
df3=df3[df.height_cm >= 175]
df3 = df3.groupby(['country','sex']).count().reset_index()

# [9] 트리맵 시각화
fig = px.treemap(df3,
                 path=['sex','country'],
                 values='height_cm',
                 color='height_cm',
                 color_continuous_scale='viridis')
fig.show()

# [10] 와플차트 시각화
fig = plt.figure(
    FigureClass=Waffle,
    plots={
        111: {
            'values': df2['height_cm'],
            'labels': ["{0} ({1})".format(n, v) for n, v in df2['country'].items()],
            'legend': {'loc': 'upper left', 'bbox_to_anchor': (1.05, 1), 'fontsize': 8},
            'title': {'label': 'Waffle chart test', 'loc': 'left'}
        }
    },
    rows=10,
    figsize=(10, 10) 
)
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>

## 6. 관계 시각화

 앞선 공분산과 상관분석과 같은 변수 간의 관계를 시각화 하는 것. 연속형 변수간의 scatter plot(산점도)

  **산점도를 그릴 때는 극단치를 제거하고서 그리는 것이 좋다. 극단치로 인해 주요 분포 구간이 압축되어 시각화의 효율이 떨어지기 때문이다.**  
  **데이터가 너무 많아서 점들이 서로 겹쳐서 정보를 제대로 확인하기 어려울 때 각각의 점에 투명도를 주어 점들의 밀도를 함께 표현하는 것이 좋다.**  
  + 산점도는 두 개의 변수간 관계만 표현할 수 있지만 버블차트를 이용하면 세 가지 이상 요소의 상관관계를 표현할 수 있다 (by 버블 크기 + 색상, 농도 등) , 원의 면적으로 해석


<img width="833" alt="스크린샷 2024-07-27 오후 10 53 31" src="https://github.com/user-attachments/assets/e320e158-155a-4df4-b9e5-78c39f57e81e">
<img width="830" alt="스크린샷 2024-07-27 오후 10 53 26" src="https://github.com/user-attachments/assets/829c7785-c017-4564-af5a-

  
### * 관계 시각화 실습
```python
# [1] 필요한 패키지 임포트
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np

# [2] 데이터 불러오기
df = pd.read_csv("데이터 경로")

# [3] 기본 산점도 시각화
plt.scatter(df['R&D Spend'], df['Profit'], s = 50, alpha = 0.4)   # R&D 비용을 X축, 이익을 Y축으로 설정, 점 크기 s = 50, alpha는 투명도

# [4] 산점도에 회귀선 추가
ax = sns.lmplot(x='R&D Spend', y='Profit', data=df)

# [5] 네 가지 요소의 정보를 포함한 산점도 시각화
plt.scatter(df['R&D Spend'], df['Profit'], s = df['Marketing Spend']*0.01, c = df['Administration'], alpha = 0.5, cmap='Spectral')
              # x축, y축, 점의 크기, 점의 색상으로 총 네 가지 요소의 정보 포함 -> 버블차트
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>

## 7. 공간 시각화

 데이터가 지리적 위치와 관련되어 있으면 실제 지도 위에 데이터를 표현하는 것이 효과적. 위도, 경도, 지명 데이터를 지도에 매핑하여 시각적으로 표현하는 것
  
* 도트맵 : 지리적 위치에 동일한 크기의 작은 점을 찍어서 해당 지역의 데이터 분포나 패턴을 표현하는 기법, 정확한 값을 전달하는 데에는 적합하지 않음 (ex 알바천국)
* 코로플레스맵 : 단계 구분도, 데이터 값의 크기에 따라 색상의 음영을 달리하여 시각화. 정확한 수치를 인지하고 비교하는 것이 어렵고, 큰 지역이 강조되는 인상을 주는 것을 유의
* 버블맵 : 버블 차트를 지도에 그린 것. 데이터 값이 원의 크기로 표현되기 때문에 코로플레스맵보다 비율을 비교하는 것이 효과적. 다만 버블의 크기를 유념해야함
* 커넥션 맵 : 지도에 찍힌 점들을 곡선 또는 직선으로 연결하여 지리적 관계 표현. 무역 관계나 항공 경로, 통신 정보 흐름 등을 표현할 때 사용
* 플로우맵, 카토그램 etc... 

  **일반적인 시각화 방법처럼 단순 이미지로 표현되는 것이 아닌, 지도를 확대하거나 위치 옮기는 등의 인터랙티브 한 활용 가능**  
  **그러한 점에서 거시적에서 미시적으로 진행되는 분석 방향과 같이 스토리라인을 잡고 시각화를 적용하는 것이 좋다**  


<img width="566" alt="스크린샷 2024-07-27 오후 11 16 34" src="https://github.com/user-attachments/assets/18da1db3-b252-4e4b-b1f2-65b598f6fefe">

  
### * 공간 시각화 실습
```python
# [1] 필요한 패키지 설치 및 임포트
!pip install folium
import folium
from folium import Marker
from folium import plugins
from folium import GeoJson
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# [2] 서울 스타벅스 지점 시각화 
df = pd.read_csv("데이터 경로") # 서울 스타벅스 지점 데이터 불러오기
geo = "Json 파일"             # GeoJSON은 지리적 객체를 JSON 형식으로 표현하는 확장. GeoJSON 파일은 지도와 같은 지리적 데이터를 시각화하기 위해 사용 

# [2-1] 남산 포인트 표시
m = folium.Map(location=[37.541, 126.986], tiles = 'Stamen Toner', zoom_start=12) # 흑백 스타일의 지도 데이터로 저장

folium.CircleMarker(
    location=[37.5538, 126.9810],  # 원형 마커의 위치 (위도, 경도)
    radius=50,                     # 원형 마커의 반지름
    popup='Laurelhurst Park',      # 마커를 클릭할 때 나타나는 팝업 텍스트
    color='#3246cc',               # 원형 마커의 테두리 색상
    fill_color='#3246cc'           # 원형 마커의 채우기 색상
).add_to(m)                        # 생성한 마커를 지도 객체 'm'에 추가

folium.Marker([37.5538, 126.9810], popup='The Waterfront').add_to(m) # 원하는 좌표에 포인트 표시 (남산)

# [2-2] 서울 지도에 스타벅스 지점 수 시각화
m = folium.Map([37.541, 126.986], zoom_start=12 ,width="%100", height="%100") 
locations = list(zip(df.latitude, df.longitude))        # zip() 함수를 통해 위도 경도 데이터에 대한 튜플 생성, 그걸 리스트로
cluster = plugins.MarkerCluster(locations=locations,    # locations=locations: 마커가 표시될 위치들.
popups=df["name"].tolist())                             # 여기서 locations는(latitude,longitude) 쌍의 리스트
                                                        # popups=df["name"].tolist(): 각 마커를 클릭할 때 나타날 팝업 텍스트
m.add_child(cluster)                                    # 생성된 마커 클러스터 객체를 지도 객체 m에 추가하는 코드

# [2-3] 서울 지도에 스타벅스 지점 수 도트맵 시각화
m = folium.Map(location=[37.541, 126.986], zoom_start=12, width="%100", height="%100") # m이라는 객체에 지도 데이터 저장
locations = list(zip(df.latitude, df.longitude))              # location에 표현하고자 하는 위도 경도 데이터 저장
for i in range(len(locations)):                               # 위도 경도 데이터 개수 만큼 작동, 해당 지점에 도트 시각화
    folium.CircleMarker(location=locations[i],radius=1).add_to(m)


# [2-3] 서울 구별 스타벅스 지점 수 집계 및 중심점 산출 & 버블맵 시각화
df_m = df.groupby('gu_name').agg({'latitude':'mean','longitude':'mean','name':'count'}).reset_index() #지도 생성을 위한 데이터 전처리
m = folium.Map(location=[37.541, 126.986], tiles='Cartodb Positron', zoom_start=11, width="%100", height="%100") # 기본 지도 생성
folium.Choropleth(
    geo_data=geo,                                           # 앞에서 불러온 json 파일 적용
    fill_color="gray"                                       # 구별 구분선, 색상 설정
    ).add_to(m)
locations = list(zip(df_m.latitude, df_m.longitude))        # 버블맵 삽입
for i in range(len(locations)):
    row = df_m.iloc[i]
    folium.CircleMarker(location=locations[i],
                        radius= float(row.name/2),          # 버블 크기 설정
                        fill_color="blue"                   # 만약 원이 커서 겹치면 float(row.name/1)의 분모값을 조정
                       ).add_to(m)

# [3] 미국 실업률 정보의 코로플레스맵 시각화
df2 = pd.read_csv("데이터 경로")                               # 데이터 불러오기
us_geo = 'JSON 파일'                                         # 주별 경계 JSON 파일 불러오기

m = folium.Map(location=[40,-98], zoom_start=3, tiles="Cartodb Positron") # 미국 지도 시각화
m.choropleth(geo_data = us_geo,                                           # json 데이터
               data = df2,                                                # 실업률 데이터
               columns = ['State','Unemployment'],                        # 연동할 컬럼 설정
               key_on = 'feature.id',                                     # json과 실업률 데이터를 연결할 키값 설정
               fill_color='YlGn',
               legend_name='실업률')                                        # 지도에 주 경계선, 실업률 데이터 연동

# [4] 서울 각국 수도 간의 커넥션맵 시각화
source_to_dest = zip([37.541,37.541,37.541,37.541,37.541],                # 서울과 도쿄, 워싱턴, 마닐라, 파리, 모스크바 위경도 입력
                     [35.6804, 38.9072, 14.5995, 48.8566,55.7558],
                     [126.986,126.986,126.986,126.986,126.986], 
                     [139.7690, -77.0369, 120.9842, 2.3522,37.6173])
fig = go.Figure()

for a, b, c, d in source_to_dest:                                         # for 문을 활용하여 위경도 입력
    fig.add_trace(go.Scattergeo(
                        lat = [a, b],
                        lon = [c, d],
                        mode = 'lines',
                        line = dict(width = 1, color="red"),
                        opacity = 0.5                                     # 선 투명도
                        ))

fig.update_layout(
                margin={"t":0,"b":0,"l":0, "r":0, "pad":0},
                showlegend=False,
                geo = dict(
                showcountries=True)                                       # 국가 경계선
                )
fig.show()
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>

## 8. 박스 플롯

 네모 상자 모양에 최대값과 최솟값을 나타내는 선이 결합된 모양의 시각화 방법. 하나의 그림으로 양적 척도 데이터의 분포 및 편향성, 평균과 중앙값 등 다양한 수치 정리
* 최소값 경계 : 제1사분위에서 1.5 IQR을 뺀 위치
* 제1사분위 : 25%
* 제2사분위 : 50% (중앙값)
* 평균
* 제3사분위 : 75%
* 최대값 경계 : 제3사분위에서 1.5 IQR을 더한 위치

  **이상치는 최솟값과 최댓값의 범위를 넘어가는 것들로 간주. 작은 원으로 표시**  
  **해석할 때는 항상 데이터 분포도를 함께 떠올리는 습관이 필요**  


<img width="652" alt="스크린샷 2024-07-28 오전 12 20 53" src="https://github.com/user-attachments/assets/f16e9e71-0a77-43ba-81a9-3875a22e1a83">

  
### * 박스 플롯 실습
```python
# [1] 필요한 패키지 임포트
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# [2] 데이터 불러오기
df = pd.read_csv("데이터 경로")

# [3] Profit 변수로 기본 가로 세로 박스 플롯 시각화
plt.figure(figsize = (8,6))
sns.boxplot(y = 'Profit', data = df)       # 세로 박스 플롯, 가로는 x = '변수명'
plt.show()

# [4] State 구분에 따른 Profit 박스 플롯 시각화
plt.figure(figsize = (8,5))
sns.boxplot(x="State", y = "Profit", data = df)

# [5] 평균, 데이터 포인트 포함한 박스 플롯 시각화
sns.boxplot((x="State", y = "Profit", showmeans = True, boxprops={'facecolor':'None'}, data = df))       # boxprops 상자 내부 색상 선택
sns.stripplot(x="State", y = "Profit", data = df, jitter = True, marker = 'o', alpha = 0.5, color = 'black') # 포인트 흩뿌리기, 원형 설정
```
<br>
<br>
____________________________________________________________________________________________________________________________________
<br>
<br>
