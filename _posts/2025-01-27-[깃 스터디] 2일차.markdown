---
layout: post
title:  "[깃 스터디] 2일차 정리"
date:   2025-01-27 16:41 +09:00
categories: khuda study
---

# 실습 인증
<img width="852" alt="스크린샷 2025-01-27 오후 4 43 49" src="https://github.com/user-attachments/assets/7ed71a10-d5c9-4bcd-a948-28af126cc891" />
일단 로컬에서 이것저것 하라는대로 해보았다. add하고 commit하고 로그보고 다시 버전 돌리고... 이걸로 무엇을 할 수 있는지 제대로 파악할 수 있었다.


# 정리
## 깃 시작하기

* 버전 관리하기
* 백업하기
* 협업하기 
 깃은 이렇게 세가지 기능을 가지는 프로그램이다.

-> 기억해야할 명령어들
```bash
# 깃 환경 이름 지정
git config user.name "~"

# 깃 환경 이메일 지정
git config user.email "~"

# 현재 경로 표시
pwd

# 현재 디렉터리 안의 내용 표시
ls

# 현재 디렉터리 안의 파일과 폴더 상세 정보까지 표시
ls -l

# 화면을 꺠끗하게 지우기
clear

# 지정한 하위 디렉터리로 이동
cd 디렉터리 이름

# 새 디렉터리 만들기
mkdir

# 홈 디렉터리로 이동
cd ~

# 파일이나 디렉터리 삭제
rm

# 터미널 종료
exit

# 현재 위치에서 지역 저장소 만들기
git init

# 깃 상태 확인
git status

# 깃에서 스테이지에 올리기
git add 파일이름

# 스테이징한 파일 커밋하기
git commit -m "메세지 이름"

# 스테이징과 커밋 동시에
git commit -a -m "메시지 이름"

# 커밋 정보 확인
git log

# 이전 버전과 최근 버전 차이
git diff

# 수정 내용 취소
git restore 파일명

# 스테이징 취소
git restore --staged 파일명

# 가장 최근 커밋 취소
git reset HEAD^

# 지정한 커밋 해시로 이동하고 이후 커밋은 취소
git reset 커밋 해시

# 지정한 커밋의 해시 변경 이력을 취소
git revert 커밋 해시

```
 ### 여기서 add, commit이란
 작업트리 -> 스테이지 (add)
 스테이지 -> 저장소, 레포 (commit)
 이런 차이가 있다. 
 작업트리는 우리가 실제로 볼 수 있는 라이브러리의 저장 공간, 스테이지와 저장소는 눈에는 보이지 않지만 우리의 버전들이 add와 commit에 따라 저장되는 곳들이다






